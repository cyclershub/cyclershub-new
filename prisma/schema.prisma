// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// enum Role {
// 	USER
// 	ADMIN
// 	MODERATOR
// }

model User {
  id    Int     @id @default(autoincrement())
	uid String @unique // @db.Uuid
  email String  @unique
	password String
  first_name  String
	last_name  String
	username  String @unique
  address  String?
	city  String?
	state  String?
	zip  String?
	country  String?

	lat Float?
	lng Float?

	// role  Role? @default(USER)
	created_at DateTime @default(now())
	updated_at DateTime @updatedAt
	available_to_host Boolean @default(false)
	avatar String?
	biography String?
	banner String?
	phone_number String?
	// One user can have many reviews from other users
	incoming_reviews Review[] @relation("incoming_reviews")
	outgoing_reviews Review[] @relation("outgoing_reviews")

	favorite_users Favorite[] @relation("favorite_users")
	favorited_by_users Favorite[] @relation("user_that_is_favorited")

	sent_messages Message[] @relation("sender")
	received_messages Message[] @relation("receiver")

	refresh_tokens RefreshToken[]
}

model Review {
	id    Int     @id @default(autoincrement())
	uid String @unique // @db.Uuid
	rating Int
	review String
	created_at DateTime @default(now())
	updated_at DateTime @updatedAt

	create_user User @relation(fields: [create_user_id], references: [id], name: "outgoing_reviews")
	create_user_id Int

	reviewed_user User @relation(fields: [reviewed_user_id], references: [id], name: "incoming_reviews")
	reviewed_user_id Int
}

model Favorite {
	id    Int     @id @default(autoincrement())
	uid String @unique // @db.Uuid
	created_at DateTime @default(now())
	updated_at DateTime @updatedAt

	user User @relation(fields: [user_id], references: [id], name: "favorite_users")
	user_id Int

	favorite_user User @relation(fields: [favorite_user_id], references: [id], name: "user_that_is_favorited")
	favorite_user_id Int
}

model Message {
	id    Int     @id @default(autoincrement())
	uid String @unique // @db.Uuid
	message String
	created_at DateTime @default(now())
	updated_at DateTime @updatedAt

	sender User @relation(fields: [sender_id], references: [id], name: "sender")
	sender_id Int

	receiver User @relation(fields: [receiver_id], references: [id], name: "receiver")
	receiver_id Int
}

model RefreshToken {
	id    Int     @id @default(autoincrement())
	token String @unique
	created_at DateTime @default(now())
	updated_at DateTime @updatedAt

	user User @relation(fields: [user_id], references: [id])
	user_id Int
}